/* tslint:disable */
/* eslint-disable */
/**
 * Ticket.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AttendeeDetailDto
 */
export interface AttendeeDetailDto {
    /**
     * 
     * @type {string}
     * @memberof AttendeeDetailDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttendeeDetailDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttendeeDetailDto
     */
    'phone'?: string | null;
}
/**
 * 
 * @export
 * @interface ChangeEventStatusDTO
 */
export interface ChangeEventStatusDTO {
    /**
     * 
     * @type {number}
     * @memberof ChangeEventStatusDTO
     */
    'eventId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChangeEventStatusDTO
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateBoothDTO
 */
export interface CreateBoothDTO {
    /**
     * 
     * @type {number}
     * @memberof CreateBoothDTO
     */
    'sponsorId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateBoothDTO
     */
    'eventId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateBoothDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBoothDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBoothDTO
     */
    'location'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateBoothRequestDTO
 */
export interface CreateBoothRequestDTO {
    /**
     * 
     * @type {number}
     * @memberof CreateBoothRequestDTO
     */
    'sponsorId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateBoothRequestDTO
     */
    'boothId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateBoothRequestDTO
     */
    'requestDate'?: string;
}
/**
 * 
 * @export
 * @interface CreateEventDTO
 */
export interface CreateEventDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateEventDTO
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEventDTO
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateEventDTO
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateEventDTO
     */
    'organizerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateEventDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateEventDTO
     */
    'venueId'?: number;
    /**
     * 
     * @type {File}
     * @memberof CreateEventDTO
     */
    'imageUrl'?: File | null;
}
/**
 * 
 * @export
 * @interface CreateEventDTOServiceResponse
 */
export interface CreateEventDTOServiceResponse {
    /**
     * 
     * @type {CreateEventDTO}
     * @memberof CreateEventDTOServiceResponse
     */
    'data'?: CreateEventDTO;
    /**
     * 
     * @type {boolean}
     * @memberof CreateEventDTOServiceResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateEventDTOServiceResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEventDTOServiceResponse
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEventDTOServiceResponse
     */
    'hint'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateEventDTOServiceResponse
     */
    'priceTotal'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateEventDTOServiceResponse
     */
    'errorMessages'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface CreateGiftDTO
 */
export interface CreateGiftDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateGiftDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGiftDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateGiftDTO
     */
    'boothId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGiftDTO
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface CreatePaymentMethodDto
 */
export interface CreatePaymentMethodDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentMethodDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateTicketDTO
 */
export interface CreateTicketDTO {
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDTO
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDTO
     */
    'eventId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDTO
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDTO
     */
    'ticketSaleEndDate'?: string;
}
/**
 * 
 * @export
 * @interface CreateTransactionDto
 */
export interface CreateTransactionDto {
    /**
     * 
     * @type {number}
     * @memberof CreateTransactionDto
     */
    'attendeeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateTransactionDto
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateTransactionDto
     */
    'paymentMethodId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateTransactionDto
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password'?: string | null;
    /**
     * 
     * @type {Role}
     * @memberof CreateUserDto
     */
    'role'?: Role;
}


/**
 * 
 * @export
 * @interface CreateVenueDTO
 */
export interface CreateVenueDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateVenueDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateVenueDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateVenueDTO
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginResquestDto
 */
export interface LoginResquestDto {
    /**
     * 
     * @type {string}
     * @memberof LoginResquestDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginResquestDto
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentMethodDto
 */
export interface PaymentMethodDto {
    /**
     * 
     * @type {number}
     * @memberof PaymentMethodDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterAttendeeDTO
 */
export interface RegisterAttendeeDTO {
    /**
     * 
     * @type {string}
     * @memberof RegisterAttendeeDTO
     */
    'registrationDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof RegisterAttendeeDTO
     */
    'ticketId'?: number;
    /**
     * 
     * @type {number}
     * @memberof RegisterAttendeeDTO
     */
    'eventId'?: number;
    /**
     * 
     * @type {Array<AttendeeDetailDto>}
     * @memberof RegisterAttendeeDTO
     */
    'attendeeDetails'?: Array<AttendeeDetailDto> | null;
}
/**
 * 
 * @export
 * @interface ResetPassDTO
 */
export interface ResetPassDTO {
    /**
     * 
     * @type {string}
     * @memberof ResetPassDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPassDTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPassDTO
     */
    'confirmPassword'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Role = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type Role = typeof Role[keyof typeof Role];


/**
 * 
 * @export
 * @interface TransactionDto
 */
export interface TransactionDto {
    /**
     * 
     * @type {number}
     * @memberof TransactionDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionDto
     */
    'attendeeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionDto
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof TransactionDto
     */
    'amount'?: number;
    /**
     * 
     * @type {PaymentMethodDto}
     * @memberof TransactionDto
     */
    'paymentMethod'?: PaymentMethodDto;
    /**
     * 
     * @type {string}
     * @memberof TransactionDto
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateAttendeeDto
 */
export interface UpdateAttendeeDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateAttendeeDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateAttendeeDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAttendeeDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAttendeeDto
     */
    'phone'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateEventDTO
 */
export interface UpdateEventDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateEventDTO
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEventDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateEventDTO
     */
    'venueId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateEventDTO
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEventDTO
     */
    'endDate'?: string;
    /**
     * 
     * @type {File}
     * @memberof UpdateEventDTO
     */
    'imageFile'?: File | null;
}
/**
 * 
 * @export
 * @interface UpdateEventDTOServiceResponse
 */
export interface UpdateEventDTOServiceResponse {
    /**
     * 
     * @type {UpdateEventDTO}
     * @memberof UpdateEventDTOServiceResponse
     */
    'data'?: UpdateEventDTO;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateEventDTOServiceResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateEventDTOServiceResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEventDTOServiceResponse
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEventDTOServiceResponse
     */
    'hint'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateEventDTOServiceResponse
     */
    'priceTotal'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateEventDTOServiceResponse
     */
    'errorMessages'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface UserStatusDTO
 */
export interface UserStatusDTO {
    /**
     * 
     * @type {string}
     * @memberof UserStatusDTO
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface UserUpdateDTO
 */
export interface UserUpdateDTO {
    /**
     * 
     * @type {number}
     * @memberof UserUpdateDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'email'?: string | null;
}

/**
 * AttendeeApi - axios parameter creator
 * @export
 */
export const AttendeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} attendeeId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeAttendeeAttendeeIdCheckinPut: async (attendeeId: number, body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attendeeId' is not null or undefined
            assertParamExists('apiAttendeeAttendeeAttendeeIdCheckinPut', 'attendeeId', attendeeId)
            const localVarPath = `/api/Attendee/attendee/{attendeeId}/checkin`
                .replace(`{${"attendeeId"}}`, encodeURIComponent(String(attendeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeAttendeesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAttendeeAttendeesIdGet', 'id', id)
            const localVarPath = `/api/Attendee/attendees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAttendeeDto} [updateAttendeeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeAttendeesIdPut: async (id: number, updateAttendeeDto?: UpdateAttendeeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAttendeeAttendeesIdPut', 'id', id)
            const localVarPath = `/api/Attendee/attendees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAttendeeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeCheckinQrPost: async (body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Attendee/checkin/qr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeEventEventIdAttendeesExportGet: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiAttendeeEventEventIdAttendeesExportGet', 'eventId', eventId)
            const localVarPath = `/api/Attendee/event/{eventId}/attendees/export`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeEventEventIdAttendeesGet: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiAttendeeEventEventIdAttendeesGet', 'eventId', eventId)
            const localVarPath = `/api/Attendee/event/{eventId}/attendees`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterAttendeeDTO} [registerAttendeeDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeRegisterPost: async (registerAttendeeDTO?: RegisterAttendeeDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Attendee/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerAttendeeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttendeeApi - functional programming interface
 * @export
 */
export const AttendeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttendeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} attendeeId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendeeAttendeeAttendeeIdCheckinPut(attendeeId: number, body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendeeAttendeeAttendeeIdCheckinPut(attendeeId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendeeApi.apiAttendeeAttendeeAttendeeIdCheckinPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendeeAttendeesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendeeAttendeesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendeeApi.apiAttendeeAttendeesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAttendeeDto} [updateAttendeeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendeeAttendeesIdPut(id: number, updateAttendeeDto?: UpdateAttendeeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendeeAttendeesIdPut(id, updateAttendeeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendeeApi.apiAttendeeAttendeesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendeeCheckinQrPost(body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendeeCheckinQrPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendeeApi.apiAttendeeCheckinQrPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendeeEventEventIdAttendeesExportGet(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendeeEventEventIdAttendeesExportGet(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendeeApi.apiAttendeeEventEventIdAttendeesExportGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendeeEventEventIdAttendeesGet(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendeeEventEventIdAttendeesGet(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendeeApi.apiAttendeeEventEventIdAttendeesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterAttendeeDTO} [registerAttendeeDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendeeRegisterPost(registerAttendeeDTO?: RegisterAttendeeDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendeeRegisterPost(registerAttendeeDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendeeApi.apiAttendeeRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttendeeApi - factory interface
 * @export
 */
export const AttendeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttendeeApiFp(configuration)
    return {
        /**
         * 
         * @param {number} attendeeId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeAttendeeAttendeeIdCheckinPut(attendeeId: number, body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttendeeAttendeeAttendeeIdCheckinPut(attendeeId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeAttendeesIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttendeeAttendeesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAttendeeDto} [updateAttendeeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeAttendeesIdPut(id: number, updateAttendeeDto?: UpdateAttendeeDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttendeeAttendeesIdPut(id, updateAttendeeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeCheckinQrPost(body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttendeeCheckinQrPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeEventEventIdAttendeesExportGet(eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttendeeEventEventIdAttendeesExportGet(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeEventEventIdAttendeesGet(eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttendeeEventEventIdAttendeesGet(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterAttendeeDTO} [registerAttendeeDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendeeRegisterPost(registerAttendeeDTO?: RegisterAttendeeDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttendeeRegisterPost(registerAttendeeDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttendeeApi - object-oriented interface
 * @export
 * @class AttendeeApi
 * @extends {BaseAPI}
 */
export class AttendeeApi extends BaseAPI {
    /**
     * 
     * @param {number} attendeeId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeeApi
     */
    public apiAttendeeAttendeeAttendeeIdCheckinPut(attendeeId: number, body?: string, options?: RawAxiosRequestConfig) {
        return AttendeeApiFp(this.configuration).apiAttendeeAttendeeAttendeeIdCheckinPut(attendeeId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeeApi
     */
    public apiAttendeeAttendeesIdGet(id: number, options?: RawAxiosRequestConfig) {
        return AttendeeApiFp(this.configuration).apiAttendeeAttendeesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateAttendeeDto} [updateAttendeeDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeeApi
     */
    public apiAttendeeAttendeesIdPut(id: number, updateAttendeeDto?: UpdateAttendeeDto, options?: RawAxiosRequestConfig) {
        return AttendeeApiFp(this.configuration).apiAttendeeAttendeesIdPut(id, updateAttendeeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeeApi
     */
    public apiAttendeeCheckinQrPost(body?: string, options?: RawAxiosRequestConfig) {
        return AttendeeApiFp(this.configuration).apiAttendeeCheckinQrPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeeApi
     */
    public apiAttendeeEventEventIdAttendeesExportGet(eventId: number, options?: RawAxiosRequestConfig) {
        return AttendeeApiFp(this.configuration).apiAttendeeEventEventIdAttendeesExportGet(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeeApi
     */
    public apiAttendeeEventEventIdAttendeesGet(eventId: number, options?: RawAxiosRequestConfig) {
        return AttendeeApiFp(this.configuration).apiAttendeeEventEventIdAttendeesGet(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterAttendeeDTO} [registerAttendeeDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeeApi
     */
    public apiAttendeeRegisterPost(registerAttendeeDTO?: RegisterAttendeeDTO, options?: RawAxiosRequestConfig) {
        return AttendeeApiFp(this.configuration).apiAttendeeRegisterPost(registerAttendeeDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthenApi - axios parameter creator
 * @export
 */
export const AuthenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginResquestDto} [loginResquestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenLoginPost: async (loginResquestDto?: LoginResquestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authen/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginResquestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPassDTO} [resetPassDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenResetPasswordPost: async (resetPassDTO?: ResetPassDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authen/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPassDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenApi - functional programming interface
 * @export
 */
export const AuthenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginResquestDto} [loginResquestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthenLoginPost(loginResquestDto?: LoginResquestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthenLoginPost(loginResquestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenApi.apiAuthenLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPassDTO} [resetPassDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthenResetPasswordPost(resetPassDTO?: ResetPassDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthenResetPasswordPost(resetPassDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenApi.apiAuthenResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenApi - factory interface
 * @export
 */
export const AuthenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginResquestDto} [loginResquestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenLoginPost(loginResquestDto?: LoginResquestDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthenLoginPost(loginResquestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPassDTO} [resetPassDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenResetPasswordPost(resetPassDTO?: ResetPassDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthenResetPasswordPost(resetPassDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenApi - object-oriented interface
 * @export
 * @class AuthenApi
 * @extends {BaseAPI}
 */
export class AuthenApi extends BaseAPI {
    /**
     * 
     * @param {LoginResquestDto} [loginResquestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenApi
     */
    public apiAuthenLoginPost(loginResquestDto?: LoginResquestDto, options?: RawAxiosRequestConfig) {
        return AuthenApiFp(this.configuration).apiAuthenLoginPost(loginResquestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPassDTO} [resetPassDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenApi
     */
    public apiAuthenResetPasswordPost(resetPassDTO?: ResetPassDTO, options?: RawAxiosRequestConfig) {
        return AuthenApiFp(this.configuration).apiAuthenResetPasswordPost(resetPassDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BoothApi - axios parameter creator
 * @export
 */
export const BoothApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothGet: async (page?: number, pageSize?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBoothIdGet', 'id', id)
            const localVarPath = `/api/Booth/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateBoothDTO} [createBoothDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothPost: async (createBoothDTO?: CreateBoothDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBoothDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateBoothDTO} [createBoothDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothPut: async (id?: number, createBoothDTO?: CreateBoothDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBoothDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoothApi - functional programming interface
 * @export
 */
export const BoothApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoothApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoothDelete(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoothDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoothApi.apiBoothDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoothGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoothGet(page, pageSize, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoothApi.apiBoothGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoothIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoothIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoothApi.apiBoothIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateBoothDTO} [createBoothDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoothPost(createBoothDTO?: CreateBoothDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoothPost(createBoothDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoothApi.apiBoothPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateBoothDTO} [createBoothDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoothPut(id?: number, createBoothDTO?: CreateBoothDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoothPut(id, createBoothDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoothApi.apiBoothPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BoothApi - factory interface
 * @export
 */
export const BoothApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoothApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothDelete(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoothDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoothGet(page, pageSize, search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoothIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateBoothDTO} [createBoothDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothPost(createBoothDTO?: CreateBoothDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoothPost(createBoothDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateBoothDTO} [createBoothDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothPut(id?: number, createBoothDTO?: CreateBoothDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoothPut(id, createBoothDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoothApi - object-oriented interface
 * @export
 * @class BoothApi
 * @extends {BaseAPI}
 */
export class BoothApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoothApi
     */
    public apiBoothDelete(id?: number, options?: RawAxiosRequestConfig) {
        return BoothApiFp(this.configuration).apiBoothDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoothApi
     */
    public apiBoothGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return BoothApiFp(this.configuration).apiBoothGet(page, pageSize, search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoothApi
     */
    public apiBoothIdGet(id: number, options?: RawAxiosRequestConfig) {
        return BoothApiFp(this.configuration).apiBoothIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateBoothDTO} [createBoothDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoothApi
     */
    public apiBoothPost(createBoothDTO?: CreateBoothDTO, options?: RawAxiosRequestConfig) {
        return BoothApiFp(this.configuration).apiBoothPost(createBoothDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {CreateBoothDTO} [createBoothDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoothApi
     */
    public apiBoothPut(id?: number, createBoothDTO?: CreateBoothDTO, options?: RawAxiosRequestConfig) {
        return BoothApiFp(this.configuration).apiBoothPut(id, createBoothDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BoothRequestApi - axios parameter creator
 * @export
 */
export const BoothRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothRequestDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BoothRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothRequestGet: async (page?: number, pageSize?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BoothRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothRequestIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBoothRequestIdGet', 'id', id)
            const localVarPath = `/api/BoothRequest/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateBoothRequestDTO} [createBoothRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothRequestPost: async (createBoothRequestDTO?: CreateBoothRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BoothRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBoothRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateBoothRequestDTO} [createBoothRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothRequestPut: async (id?: number, createBoothRequestDTO?: CreateBoothRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BoothRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBoothRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoothRequestApi - functional programming interface
 * @export
 */
export const BoothRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoothRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoothRequestDelete(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoothRequestDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoothRequestApi.apiBoothRequestDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoothRequestGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoothRequestGet(page, pageSize, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoothRequestApi.apiBoothRequestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoothRequestIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoothRequestIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoothRequestApi.apiBoothRequestIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateBoothRequestDTO} [createBoothRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoothRequestPost(createBoothRequestDTO?: CreateBoothRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoothRequestPost(createBoothRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoothRequestApi.apiBoothRequestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateBoothRequestDTO} [createBoothRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoothRequestPut(id?: number, createBoothRequestDTO?: CreateBoothRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoothRequestPut(id, createBoothRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoothRequestApi.apiBoothRequestPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BoothRequestApi - factory interface
 * @export
 */
export const BoothRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoothRequestApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothRequestDelete(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoothRequestDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothRequestGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoothRequestGet(page, pageSize, search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothRequestIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoothRequestIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateBoothRequestDTO} [createBoothRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothRequestPost(createBoothRequestDTO?: CreateBoothRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoothRequestPost(createBoothRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateBoothRequestDTO} [createBoothRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoothRequestPut(id?: number, createBoothRequestDTO?: CreateBoothRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoothRequestPut(id, createBoothRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoothRequestApi - object-oriented interface
 * @export
 * @class BoothRequestApi
 * @extends {BaseAPI}
 */
export class BoothRequestApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoothRequestApi
     */
    public apiBoothRequestDelete(id?: number, options?: RawAxiosRequestConfig) {
        return BoothRequestApiFp(this.configuration).apiBoothRequestDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoothRequestApi
     */
    public apiBoothRequestGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return BoothRequestApiFp(this.configuration).apiBoothRequestGet(page, pageSize, search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoothRequestApi
     */
    public apiBoothRequestIdGet(id: number, options?: RawAxiosRequestConfig) {
        return BoothRequestApiFp(this.configuration).apiBoothRequestIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateBoothRequestDTO} [createBoothRequestDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoothRequestApi
     */
    public apiBoothRequestPost(createBoothRequestDTO?: CreateBoothRequestDTO, options?: RawAxiosRequestConfig) {
        return BoothRequestApiFp(this.configuration).apiBoothRequestPost(createBoothRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {CreateBoothRequestDTO} [createBoothRequestDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoothRequestApi
     */
    public apiBoothRequestPut(id?: number, createBoothRequestDTO?: CreateBoothRequestDTO, options?: RawAxiosRequestConfig) {
        return BoothRequestApiFp(this.configuration).apiBoothRequestPut(id, createBoothRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventApi - axios parameter creator
 * @export
 */
export const EventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change the status of an event by admin.
         * @param {ChangeEventStatusDTO} [changeEventStatusDTO] Event status details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventChangeEventStatusPost: async (changeEventStatusDTO?: ChangeEventStatusDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Event/ChangeEventStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeEventStatusDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of events with pagination, search, and sort options.
         * @param {number} [page] Page number.
         * @param {number} [pageSize] Number of events per page.
         * @param {string} [search] Search keyword.
         * @param {string} [sort] Sort by (e.g., \&quot;startdate\&quot;, \&quot;enddate\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGet: async (page?: number, pageSize?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an event by its ID.
         * @param {number} id Event ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEventIdDelete', 'id', id)
            const localVarPath = `/api/Event/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an event by its ID.
         * @param {number} id Event ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEventIdGet', 'id', id)
            const localVarPath = `/api/Event/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example request:        PUT /api/Event/1      {         \"title\": \"Updated Event\",         \"startDate\": \"2024-08-17T00:00:00Z\",         \"endDate\": \"2024-08-18T00:00:00Z\",         \"venueId\": 2,         \"description\": \"Updated Description\"      }
         * @summary Update an existing event.
         * @param {number} id Event ID.
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {number} [venueId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {File} [imageFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventIdPut: async (id: number, title?: string, description?: string, venueId?: number, startDate?: string, endDate?: string, imageFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEventIdPut', 'id', id)
            const localVarPath = `/api/Event/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (title !== undefined) { 
                localVarFormParams.append('Title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
            if (venueId !== undefined) { 
                localVarFormParams.append('VenueId', venueId as any);
            }
    
            if (startDate !== undefined) { 
                localVarFormParams.append('StartDate', startDate as any);
            }
    
            if (endDate !== undefined) { 
                localVarFormParams.append('EndDate', endDate as any);
            }
    
            if (imageFile !== undefined) { 
                localVarFormParams.append('ImageFile', imageFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/Event      {         \"title\": \"Sample Event\",         \"startDate\": \"2024-08-15T00:00:00Z\",         \"endDate\": \"2024-08-16T00:00:00Z\",         \"organizerId\": 1,         \"venueId\": 1,         \"description\": \"Event Description\",         \"imageUrl\": \"example.jpg\"      }
         * @summary Create a new event.
         * @param {string} [title] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {number} [organizerId] 
         * @param {string} [description] 
         * @param {number} [venueId] 
         * @param {File} [imageUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventPost: async (title?: string, startDate?: string, endDate?: string, organizerId?: number, description?: string, venueId?: number, imageUrl?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (title !== undefined) { 
                localVarFormParams.append('Title', title as any);
            }
    
            if (startDate !== undefined) { 
                localVarFormParams.append('StartDate', startDate as any);
            }
    
            if (endDate !== undefined) { 
                localVarFormParams.append('EndDate', endDate as any);
            }
    
            if (organizerId !== undefined) { 
                localVarFormParams.append('OrganizerId', organizerId as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
            if (venueId !== undefined) { 
                localVarFormParams.append('VenueId', venueId as any);
            }
    
            if (imageUrl !== undefined) { 
                localVarFormParams.append('ImageUrl', imageUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} status 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventStatusStatusGet: async (status: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('apiEventStatusStatusGet', 'status', status)
            const localVarPath = `/api/Event/status/{status}`
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventApi - functional programming interface
 * @export
 */
export const EventApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change the status of an event by admin.
         * @param {ChangeEventStatusDTO} [changeEventStatusDTO] Event status details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventChangeEventStatusPost(changeEventStatusDTO?: ChangeEventStatusDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventChangeEventStatusPost(changeEventStatusDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiEventChangeEventStatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a list of events with pagination, search, and sort options.
         * @param {number} [page] Page number.
         * @param {number} [pageSize] Number of events per page.
         * @param {string} [search] Search keyword.
         * @param {string} [sort] Sort by (e.g., \&quot;startdate\&quot;, \&quot;enddate\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventGet(page, pageSize, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiEventGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an event by its ID.
         * @param {number} id Event ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiEventIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get an event by its ID.
         * @param {number} id Event ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiEventIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Example request:        PUT /api/Event/1      {         \"title\": \"Updated Event\",         \"startDate\": \"2024-08-17T00:00:00Z\",         \"endDate\": \"2024-08-18T00:00:00Z\",         \"venueId\": 2,         \"description\": \"Updated Description\"      }
         * @summary Update an existing event.
         * @param {number} id Event ID.
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {number} [venueId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {File} [imageFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventIdPut(id: number, title?: string, description?: string, venueId?: number, startDate?: string, endDate?: string, imageFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateEventDTOServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventIdPut(id, title, description, venueId, startDate, endDate, imageFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiEventIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sample request:        POST /api/Event      {         \"title\": \"Sample Event\",         \"startDate\": \"2024-08-15T00:00:00Z\",         \"endDate\": \"2024-08-16T00:00:00Z\",         \"organizerId\": 1,         \"venueId\": 1,         \"description\": \"Event Description\",         \"imageUrl\": \"example.jpg\"      }
         * @summary Create a new event.
         * @param {string} [title] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {number} [organizerId] 
         * @param {string} [description] 
         * @param {number} [venueId] 
         * @param {File} [imageUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventPost(title?: string, startDate?: string, endDate?: string, organizerId?: number, description?: string, venueId?: number, imageUrl?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventDTOServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventPost(title, startDate, endDate, organizerId, description, venueId, imageUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiEventPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} status 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventStatusStatusGet(status: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventStatusStatusGet(status, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiEventStatusStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventApi - factory interface
 * @export
 */
export const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventApiFp(configuration)
    return {
        /**
         * 
         * @summary Change the status of an event by admin.
         * @param {ChangeEventStatusDTO} [changeEventStatusDTO] Event status details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventChangeEventStatusPost(changeEventStatusDTO?: ChangeEventStatusDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventChangeEventStatusPost(changeEventStatusDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of events with pagination, search, and sort options.
         * @param {number} [page] Page number.
         * @param {number} [pageSize] Number of events per page.
         * @param {string} [search] Search keyword.
         * @param {string} [sort] Sort by (e.g., \&quot;startdate\&quot;, \&quot;enddate\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventGet(page, pageSize, search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an event by its ID.
         * @param {number} id Event ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an event by its ID.
         * @param {number} id Event ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Example request:        PUT /api/Event/1      {         \"title\": \"Updated Event\",         \"startDate\": \"2024-08-17T00:00:00Z\",         \"endDate\": \"2024-08-18T00:00:00Z\",         \"venueId\": 2,         \"description\": \"Updated Description\"      }
         * @summary Update an existing event.
         * @param {number} id Event ID.
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {number} [venueId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {File} [imageFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventIdPut(id: number, title?: string, description?: string, venueId?: number, startDate?: string, endDate?: string, imageFile?: File, options?: any): AxiosPromise<UpdateEventDTOServiceResponse> {
            return localVarFp.apiEventIdPut(id, title, description, venueId, startDate, endDate, imageFile, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        POST /api/Event      {         \"title\": \"Sample Event\",         \"startDate\": \"2024-08-15T00:00:00Z\",         \"endDate\": \"2024-08-16T00:00:00Z\",         \"organizerId\": 1,         \"venueId\": 1,         \"description\": \"Event Description\",         \"imageUrl\": \"example.jpg\"      }
         * @summary Create a new event.
         * @param {string} [title] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {number} [organizerId] 
         * @param {string} [description] 
         * @param {number} [venueId] 
         * @param {File} [imageUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventPost(title?: string, startDate?: string, endDate?: string, organizerId?: number, description?: string, venueId?: number, imageUrl?: File, options?: any): AxiosPromise<CreateEventDTOServiceResponse> {
            return localVarFp.apiEventPost(title, startDate, endDate, organizerId, description, venueId, imageUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} status 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventStatusStatusGet(status: string, page?: number, pageSize?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventStatusStatusGet(status, page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export class EventApi extends BaseAPI {
    /**
     * 
     * @summary Change the status of an event by admin.
     * @param {ChangeEventStatusDTO} [changeEventStatusDTO] Event status details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public apiEventChangeEventStatusPost(changeEventStatusDTO?: ChangeEventStatusDTO, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiEventChangeEventStatusPost(changeEventStatusDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of events with pagination, search, and sort options.
     * @param {number} [page] Page number.
     * @param {number} [pageSize] Number of events per page.
     * @param {string} [search] Search keyword.
     * @param {string} [sort] Sort by (e.g., \&quot;startdate\&quot;, \&quot;enddate\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public apiEventGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiEventGet(page, pageSize, search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an event by its ID.
     * @param {number} id Event ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public apiEventIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiEventIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an event by its ID.
     * @param {number} id Event ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public apiEventIdGet(id: number, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiEventIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example request:        PUT /api/Event/1      {         \"title\": \"Updated Event\",         \"startDate\": \"2024-08-17T00:00:00Z\",         \"endDate\": \"2024-08-18T00:00:00Z\",         \"venueId\": 2,         \"description\": \"Updated Description\"      }
     * @summary Update an existing event.
     * @param {number} id Event ID.
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {number} [venueId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {File} [imageFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public apiEventIdPut(id: number, title?: string, description?: string, venueId?: number, startDate?: string, endDate?: string, imageFile?: File, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiEventIdPut(id, title, description, venueId, startDate, endDate, imageFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        POST /api/Event      {         \"title\": \"Sample Event\",         \"startDate\": \"2024-08-15T00:00:00Z\",         \"endDate\": \"2024-08-16T00:00:00Z\",         \"organizerId\": 1,         \"venueId\": 1,         \"description\": \"Event Description\",         \"imageUrl\": \"example.jpg\"      }
     * @summary Create a new event.
     * @param {string} [title] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {number} [organizerId] 
     * @param {string} [description] 
     * @param {number} [venueId] 
     * @param {File} [imageUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public apiEventPost(title?: string, startDate?: string, endDate?: string, organizerId?: number, description?: string, venueId?: number, imageUrl?: File, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiEventPost(title, startDate, endDate, organizerId, description, venueId, imageUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} status 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public apiEventStatusStatusGet(status: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiEventStatusStatusGet(status, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GiftApi - axios parameter creator
 * @export
 */
export const GiftApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGiftDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Gift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGiftGet: async (page?: number, pageSize?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Gift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGiftIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGiftIdGet', 'id', id)
            const localVarPath = `/api/Gift/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateGiftDTO} [createGiftDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGiftPost: async (createGiftDTO?: CreateGiftDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Gift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGiftDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateGiftDTO} [createGiftDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGiftPut: async (id?: number, createGiftDTO?: CreateGiftDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Gift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGiftDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GiftApi - functional programming interface
 * @export
 */
export const GiftApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GiftApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGiftDelete(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGiftDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftApi.apiGiftDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGiftGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGiftGet(page, pageSize, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftApi.apiGiftGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGiftIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGiftIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftApi.apiGiftIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateGiftDTO} [createGiftDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGiftPost(createGiftDTO?: CreateGiftDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGiftPost(createGiftDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftApi.apiGiftPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateGiftDTO} [createGiftDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGiftPut(id?: number, createGiftDTO?: CreateGiftDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGiftPut(id, createGiftDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftApi.apiGiftPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GiftApi - factory interface
 * @export
 */
export const GiftApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GiftApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGiftDelete(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiGiftDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGiftGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiGiftGet(page, pageSize, search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGiftIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiGiftIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateGiftDTO} [createGiftDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGiftPost(createGiftDTO?: CreateGiftDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiGiftPost(createGiftDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateGiftDTO} [createGiftDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGiftPut(id?: number, createGiftDTO?: CreateGiftDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiGiftPut(id, createGiftDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GiftApi - object-oriented interface
 * @export
 * @class GiftApi
 * @extends {BaseAPI}
 */
export class GiftApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftApi
     */
    public apiGiftDelete(id?: number, options?: RawAxiosRequestConfig) {
        return GiftApiFp(this.configuration).apiGiftDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftApi
     */
    public apiGiftGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return GiftApiFp(this.configuration).apiGiftGet(page, pageSize, search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftApi
     */
    public apiGiftIdGet(id: number, options?: RawAxiosRequestConfig) {
        return GiftApiFp(this.configuration).apiGiftIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateGiftDTO} [createGiftDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftApi
     */
    public apiGiftPost(createGiftDTO?: CreateGiftDTO, options?: RawAxiosRequestConfig) {
        return GiftApiFp(this.configuration).apiGiftPost(createGiftDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {CreateGiftDTO} [createGiftDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftApi
     */
    public apiGiftPut(id?: number, createGiftDTO?: CreateGiftDTO, options?: RawAxiosRequestConfig) {
        return GiftApiFp(this.configuration).apiGiftPut(id, createGiftDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentGet: async (page?: number, pageSize?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPaymentIdDelete', 'id', id)
            const localVarPath = `/api/Payment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPaymentIdGet', 'id', id)
            const localVarPath = `/api/Payment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PaymentMethodDto} [paymentMethodDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentIdPut: async (id: number, paymentMethodDto?: PaymentMethodDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPaymentIdPut', 'id', id)
            const localVarPath = `/api/Payment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentMethodDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePaymentMethodDto} [createPaymentMethodDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentPost: async (createPaymentMethodDto?: CreatePaymentMethodDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPaymentMethodDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentGet(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentGet(page, pageSize, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiPaymentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiPaymentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiPaymentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PaymentMethodDto} [paymentMethodDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentIdPut(id: number, paymentMethodDto?: PaymentMethodDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentIdPut(id, paymentMethodDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiPaymentIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePaymentMethodDto} [createPaymentMethodDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentPost(createPaymentMethodDto?: CreatePaymentMethodDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentPost(createPaymentMethodDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiPaymentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentGet(page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentGet(page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PaymentMethodDto} [paymentMethodDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentIdPut(id: number, paymentMethodDto?: PaymentMethodDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentIdPut(id, paymentMethodDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePaymentMethodDto} [createPaymentMethodDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentPost(createPaymentMethodDto?: CreatePaymentMethodDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentPost(createPaymentMethodDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiPaymentGet(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiPaymentGet(page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiPaymentIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiPaymentIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiPaymentIdGet(id: number, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiPaymentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PaymentMethodDto} [paymentMethodDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiPaymentIdPut(id: number, paymentMethodDto?: PaymentMethodDto, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiPaymentIdPut(id, paymentMethodDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePaymentMethodDto} [createPaymentMethodDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiPaymentPost(createPaymentMethodDto?: CreatePaymentMethodDto, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiPaymentPost(createPaymentMethodDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TicketApi - axios parameter creator
 * @export
 */
export const TicketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketIdDelete', 'id', id)
            const localVarPath = `/api/Ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketIdGet', 'id', id)
            const localVarPath = `/api/Ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CreateTicketDTO} [createTicketDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketIdPut: async (id: number, createTicketDTO?: CreateTicketDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTicketIdPut', 'id', id)
            const localVarPath = `/api/Ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTicketDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTicketDTO} [createTicketDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketPost: async (createTicketDTO?: CreateTicketDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTicketDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketApi - functional programming interface
 * @export
 */
export const TicketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CreateTicketDTO} [createTicketDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketIdPut(id: number, createTicketDTO?: CreateTicketDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketIdPut(id, createTicketDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateTicketDTO} [createTicketDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTicketPost(createTicketDTO?: CreateTicketDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTicketPost(createTicketDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketApi.apiTicketPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TicketApi - factory interface
 * @export
 */
export const TicketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketGet(page?: number, pageSize?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTicketGet(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTicketIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTicketIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CreateTicketDTO} [createTicketDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketIdPut(id: number, createTicketDTO?: CreateTicketDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiTicketIdPut(id, createTicketDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTicketDTO} [createTicketDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTicketPost(createTicketDTO?: CreateTicketDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiTicketPost(createTicketDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketApi - object-oriented interface
 * @export
 * @class TicketApi
 * @extends {BaseAPI}
 */
export class TicketApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public apiTicketGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketGet(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public apiTicketIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public apiTicketIdGet(id: number, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CreateTicketDTO} [createTicketDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public apiTicketIdPut(id: number, createTicketDTO?: CreateTicketDTO, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketIdPut(id, createTicketDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTicketDTO} [createTicketDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public apiTicketPost(createTicketDTO?: CreateTicketDTO, options?: RawAxiosRequestConfig) {
        return TicketApiFp(this.configuration).apiTicketPost(createTicketDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TransactionApi - axios parameter creator
 * @export
 */
export const TransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} attendeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionAttendeesAttendeeIdTransactionsGet: async (attendeeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attendeeId' is not null or undefined
            assertParamExists('apiTransactionAttendeesAttendeeIdTransactionsGet', 'attendeeId', attendeeId)
            const localVarPath = `/api/Transaction/attendees/{attendeeId}/transactions`
                .replace(`{${"attendeeId"}}`, encodeURIComponent(String(attendeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTransactionIdDelete', 'id', id)
            const localVarPath = `/api/Transaction/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTransactionIdGet', 'id', id)
            const localVarPath = `/api/Transaction/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TransactionDto} [transactionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionIdPut: async (id: number, transactionDto?: TransactionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTransactionIdPut', 'id', id)
            const localVarPath = `/api/Transaction/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTransactionDto} [createTransactionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionPost: async (createTransactionDto?: CreateTransactionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTransactionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the total amount spent by an attendee.
         * @param {number} attendeeId The ID of the attendee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionTotalAmountAttendeeIdGet: async (attendeeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attendeeId' is not null or undefined
            assertParamExists('apiTransactionTotalAmountAttendeeIdGet', 'attendeeId', attendeeId)
            const localVarPath = `/api/Transaction/total-amount/{attendeeId}`
                .replace(`{${"attendeeId"}}`, encodeURIComponent(String(attendeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionTransactionsTransactionIdStatusPut: async (transactionId: number, body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('apiTransactionTransactionsTransactionIdStatusPut', 'transactionId', transactionId)
            const localVarPath = `/api/Transaction/transactions/{transactionId}/status`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionApi - functional programming interface
 * @export
 */
export const TransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} attendeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionAttendeesAttendeeIdTransactionsGet(attendeeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionAttendeesAttendeeIdTransactionsGet(attendeeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.apiTransactionAttendeesAttendeeIdTransactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.apiTransactionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.apiTransactionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TransactionDto} [transactionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionIdPut(id: number, transactionDto?: TransactionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionIdPut(id, transactionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.apiTransactionIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateTransactionDto} [createTransactionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionPost(createTransactionDto?: CreateTransactionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionPost(createTransactionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.apiTransactionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the total amount spent by an attendee.
         * @param {number} attendeeId The ID of the attendee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionTotalAmountAttendeeIdGet(attendeeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionTotalAmountAttendeeIdGet(attendeeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.apiTransactionTotalAmountAttendeeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} transactionId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionTransactionsTransactionIdStatusPut(transactionId: number, body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionTransactionsTransactionIdStatusPut(transactionId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.apiTransactionTransactionsTransactionIdStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionApi - factory interface
 * @export
 */
export const TransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionApiFp(configuration)
    return {
        /**
         * 
         * @param {number} attendeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionAttendeesAttendeeIdTransactionsGet(attendeeId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTransactionAttendeesAttendeeIdTransactionsGet(attendeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTransactionIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTransactionIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TransactionDto} [transactionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionIdPut(id: number, transactionDto?: TransactionDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiTransactionIdPut(id, transactionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTransactionDto} [createTransactionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionPost(createTransactionDto?: CreateTransactionDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiTransactionPost(createTransactionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the total amount spent by an attendee.
         * @param {number} attendeeId The ID of the attendee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionTotalAmountAttendeeIdGet(attendeeId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTransactionTotalAmountAttendeeIdGet(attendeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionTransactionsTransactionIdStatusPut(transactionId: number, body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiTransactionTransactionsTransactionIdStatusPut(transactionId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionApi - object-oriented interface
 * @export
 * @class TransactionApi
 * @extends {BaseAPI}
 */
export class TransactionApi extends BaseAPI {
    /**
     * 
     * @param {number} attendeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public apiTransactionAttendeesAttendeeIdTransactionsGet(attendeeId: number, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).apiTransactionAttendeesAttendeeIdTransactionsGet(attendeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public apiTransactionIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).apiTransactionIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public apiTransactionIdGet(id: number, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).apiTransactionIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TransactionDto} [transactionDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public apiTransactionIdPut(id: number, transactionDto?: TransactionDto, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).apiTransactionIdPut(id, transactionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTransactionDto} [createTransactionDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public apiTransactionPost(createTransactionDto?: CreateTransactionDto, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).apiTransactionPost(createTransactionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the total amount spent by an attendee.
     * @param {number} attendeeId The ID of the attendee.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public apiTransactionTotalAmountAttendeeIdGet(attendeeId: number, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).apiTransactionTotalAmountAttendeeIdGet(attendeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public apiTransactionTransactionsTransactionIdStatusPut(transactionId: number, body?: string, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).apiTransactionTransactionsTransactionIdStatusPut(transactionId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet: async (page?: number, pageSize?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserIdGet', 'id', id)
            const localVarPath = `/api/User/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UserStatusDTO} [userStatusDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserIdStatusPatch: async (id: number, userStatusDTO?: UserStatusDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserIdStatusPatch', 'id', id)
            const localVarPath = `/api/User/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userStatusDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrganizerGet: async (page?: number, pageSize?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/organizer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDto} [createUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPost: async (createUserDto?: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserUpdateDTO} [userUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPut: async (userUpdateDTO?: UserUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSponsorGet: async (page?: number, pageSize?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/sponsor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserStaffGet: async (page?: number, pageSize?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/staff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGet(page, pageSize, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UserStatusDTO} [userStatusDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserIdStatusPatch(id: number, userStatusDTO?: UserStatusDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserIdStatusPatch(id, userStatusDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserOrganizerGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserOrganizerGet(page, pageSize, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserOrganizerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserDto} [createUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserPost(createUserDto?: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserPost(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserUpdateDTO} [userUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserPut(userUpdateDTO?: UserUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserPut(userUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserSponsorGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserSponsorGet(page, pageSize, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserSponsorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserStaffGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserStaffGet(page, pageSize, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserStaffGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserGet(page, pageSize, search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UserStatusDTO} [userStatusDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserIdStatusPatch(id: number, userStatusDTO?: UserStatusDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserIdStatusPatch(id, userStatusDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrganizerGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserOrganizerGet(page, pageSize, search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDto} [createUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPost(createUserDto?: CreateUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserPost(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserUpdateDTO} [userUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPut(userUpdateDTO?: UserUpdateDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserPut(userUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSponsorGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserSponsorGet(page, pageSize, search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserStaffGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserStaffGet(page, pageSize, search, sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGet(page, pageSize, search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserIdGet(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UserStatusDTO} [userStatusDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserIdStatusPatch(id: number, userStatusDTO?: UserStatusDTO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserIdStatusPatch(id, userStatusDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserOrganizerGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserOrganizerGet(page, pageSize, search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDto} [createUserDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserPost(createUserDto?: CreateUserDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserPost(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserUpdateDTO} [userUpdateDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserPut(userUpdateDTO?: UserUpdateDTO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserPut(userUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserSponsorGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserSponsorGet(page, pageSize, search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserStaffGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserStaffGet(page, pageSize, search, sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VenueApi - axios parameter creator
 * @export
 */
export const VenueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVenueDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Venue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVenueGet: async (page?: number, pageSize?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Venue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVenueIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVenueIdGet', 'id', id)
            const localVarPath = `/api/Venue/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateVenueDTO} [createVenueDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVenuePost: async (createVenueDTO?: CreateVenueDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Venue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVenueDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateVenueDTO} [createVenueDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVenuePut: async (id?: number, createVenueDTO?: CreateVenueDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Venue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVenueDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VenueApi - functional programming interface
 * @export
 */
export const VenueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VenueApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVenueDelete(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVenueDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VenueApi.apiVenueDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVenueGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVenueGet(page, pageSize, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VenueApi.apiVenueGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVenueIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVenueIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VenueApi.apiVenueIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateVenueDTO} [createVenueDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVenuePost(createVenueDTO?: CreateVenueDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVenuePost(createVenueDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VenueApi.apiVenuePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateVenueDTO} [createVenueDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVenuePut(id?: number, createVenueDTO?: CreateVenueDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVenuePut(id, createVenueDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VenueApi.apiVenuePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VenueApi - factory interface
 * @export
 */
export const VenueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VenueApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVenueDelete(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiVenueDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVenueGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiVenueGet(page, pageSize, search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVenueIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiVenueIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateVenueDTO} [createVenueDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVenuePost(createVenueDTO?: CreateVenueDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiVenuePost(createVenueDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {CreateVenueDTO} [createVenueDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVenuePut(id?: number, createVenueDTO?: CreateVenueDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiVenuePut(id, createVenueDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VenueApi - object-oriented interface
 * @export
 * @class VenueApi
 * @extends {BaseAPI}
 */
export class VenueApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VenueApi
     */
    public apiVenueDelete(id?: number, options?: RawAxiosRequestConfig) {
        return VenueApiFp(this.configuration).apiVenueDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VenueApi
     */
    public apiVenueGet(page?: number, pageSize?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return VenueApiFp(this.configuration).apiVenueGet(page, pageSize, search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VenueApi
     */
    public apiVenueIdGet(id: number, options?: RawAxiosRequestConfig) {
        return VenueApiFp(this.configuration).apiVenueIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateVenueDTO} [createVenueDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VenueApi
     */
    public apiVenuePost(createVenueDTO?: CreateVenueDTO, options?: RawAxiosRequestConfig) {
        return VenueApiFp(this.configuration).apiVenuePost(createVenueDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {CreateVenueDTO} [createVenueDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VenueApi
     */
    public apiVenuePut(id?: number, createVenueDTO?: CreateVenueDTO, options?: RawAxiosRequestConfig) {
        return VenueApiFp(this.configuration).apiVenuePut(id, createVenueDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



